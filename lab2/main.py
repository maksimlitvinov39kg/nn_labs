import json
import streamlit as st
from models.rugpt3large import RUGPT3Large

def load_config(config_path):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ JSON-—Ñ–∞–π–ª–∞."""
    try:
        with open(config_path, 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        st.error(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
    except json.JSONDecodeError:
        st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.")
    return None

@st.cache_resource
def init_model(config_path="config.json"):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
    config = load_config(config_path)
    if config is None:
        return None, None
    
    try:
        generator = RUGPT3Large(
            model_name_or_path=config["model_name_or_path"],
            device=config["device"]
        )
        return generator, config
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏: {e}")
        return None, None

def initialize_session_state():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏."""
    if 'model_initialized' not in st.session_state:
        st.session_state.model_initialized = False
    if 'generator' not in st.session_state:
        st.session_state.generator = None
    if 'config' not in st.session_state:
        st.session_state.config = None

def main():
    st.write("# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é ruGPT-3")
    
    initialize_session_state()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
    if not st.session_state.model_initialized:
        generator, config = init_model(config_path='configs/rugpt3large.json')
        if generator and config:
            st.session_state.generator = generator
            st.session_state.config = config
            st.session_state.model_initialized = True
    
    if not st.session_state.model_initialized:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    gen_params = st.session_state.config["generation_params"]
    
    # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with st.form("generation_form"):
        prompt = st.text_area("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è", 
                            "")
        
        col1, col2 = st.columns(2)
        
        with col1:
            max_length = st.slider("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞", 20, 500, 
                                 gen_params["max_length"])
            min_length = st.slider("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞", 10, max_length, 
                                 gen_params["min_length"])
            temperature = st.slider("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", 0.1, 2.0, 
                                 gen_params["temperature"], 0.1)
            top_k = st.slider("Top-K", 1, 100, gen_params["top_k"])
            
        with col2:
            top_p = st.slider("Top-P", 0.0, 1.0, gen_params["top_p"], 0.1)
            repetition_penalty = st.slider("–®—Ç—Ä–∞—Ñ –∑–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è", 1.0, 2.0, 
                                        gen_params["repetition_penalty"], 0.1)
            num_return_sequences = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤", 1, 5, 
                                          gen_params["num_return_sequences"])
            do_sample = st.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—ç–º–ø–ª–∏–Ω–≥", 
                                  gen_params["do_sample"])


        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –ø—Ä–µ—Ñ–∏–∫—Å–∞ –∏ —Å—É—Ñ—Ñ–∏–∫—Å–∞
        with st.expander("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"):
            use_prefix = st.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å")
            prefix = st.text_input("–ü—Ä–µ—Ñ–∏–∫—Å", "") if use_prefix else ""
            
            use_suffix = st.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—Ñ—Ñ–∏–∫—Å")
            suffix = st.text_input("–°—É—Ñ—Ñ–∏–∫—Å", "") if use_suffix else ""

        # –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–µ
        generate_button = st.form_submit_button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
    if generate_button:
        if not prompt.strip():
            st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")
        else:
            with st.spinner('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞...'):
                try:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç
                    full_prompt = f"{prefix}{prompt}{suffix}"
                    
                    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                    generation_params = {
                        "max_length": max_length,
                        "min_length": min_length,
                        "num_return_sequences": num_return_sequences,
                        "do_sample": do_sample,
                        "temperature": temperature,
                        "top_k": top_k,
                        "top_p": top_p,
                        "repetition_penalty": repetition_penalty,
                    }

                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
                    generated_texts = st.session_state.generator.generate_text(
                        prompt=full_prompt,
                        **generation_params
                    )
                    
                    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    st.success("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                    for i, text in enumerate(generated_texts, 1):
                        with st.expander(f"–í–∞—Ä–∏–∞–Ω—Ç {i}"):
                            st.write(text)
                            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
                            if st.button(f"–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç {i}", key=f"copy_{i}"):
                                st.write("–¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!")
                                st.session_state[f'clipboard_{i}'] = text

                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {str(e)}")

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –º–æ–¥–µ–ª–∏
    st.sidebar.info("–°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏: –ê–∫—Ç–∏–≤–Ω–∞" if st.session_state.model_initialized 
                   else "–°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏: –ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

if __name__ == "__main__":
    st.set_page_config(
        page_title="–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ–∫—Å—Ç–∞ ruGPT-3",
        page_icon="üìù",
        layout="wide"
    )
    main()